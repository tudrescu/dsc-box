---

- name: Removing Plugins if they exist
  action: >
      shell bin/kibana-plugin remove {{ item.short }}
      chdir={{ kibana_dir }}
  with_items: "{{ kibana_plugins }}"
  ignore_errors: yes

- name: Installing official Plugins by Name
  action: >
      shell bin/kibana-plugin install {{ item.name }}
      chdir={{ kibana_dir }}
  with_items: "{{ kibana_plugins }}"
  ignore_errors: yes
  environment: "{{ proxy_env }}"
  when: java_useproxy == "false" or not java_useproxy


# Download Official Plugins if behind proxy. kibana plugin command does not support proxies
- name: Download official Plugins
  get_url: >
    url={{ item.url }}
    dest=/tmp/{{ item.short }}-{{ item.version }}.{{ item.type }}
    validate_certs={{ validate_apt_certificates }}
  with_items: "{{ kibana_plugins }}"
  ignore_errors: yes
  environment: "{{ proxy_env }}"
  when: java_useproxy == "true" or java_useproxy


- name: Installing official Plugins by URL when using proxy
  action: >
      shell bin/kibana-plugin install file:///tmp/{{ item.short }}-{{ item.version }}.{{ item.type }}
      chdir={{ kibana_dir }}
  with_items: "{{ kibana_plugins }}"
  ignore_errors: yes
  when: java_useproxy == "true" or java_useproxy
  notify: Restart Kibana

# - name: Cleanup downloaded plugins
#   file: name=/tmp/{{ item.short }}-{{ item.version }}.tar.gz state=absent
#   with_items: "{{ kibana_plugins }}"
#   ignore_errors: yes
#   when: java_useproxy == "true" or java_useproxy

# Fix Permissions on Kibana Home
- name: Fix permissions in Kibana Home
  file: >
    path="{{ item }}"
    state=directory
    owner="{{ kibana_user }}"
    group="{{ kibana_group }}"
    recurse=yes
  with_items:
    - "{{ kibana_dir }}/optimize"
    - "{{ kibana_dir }}/plugins"

# Configure directories
- name: Fix permission for logs
  file:
    path: "{{ kibana_log_dir }}"
    state: directory
    owner: "{{ kibana_user }}"
    group: "{{ kibana_group }}"
    recurse: yes
  when: kibana_log_dir is defined
